export declare class FunctionService {
    private client;
    constructor(token: string);
    call(request: CallRequest): Promise<CallResponse>;
    delete(request: DeleteRequest): Promise<DeleteResponse>;
    deploy(request: DeployRequest): Promise<DeployResponse>;
    describe(request: DescribeRequest): Promise<DescribeResponse>;
    list(request: ListRequest): Promise<ListResponse>;
}
export interface CallRequest {
    name?: string;
    request?: {
        [key: string]: any;
    };
}
export interface CallResponse {
    response?: {
        [key: string]: any;
    };
}
export interface DeleteRequest {
    name?: string;
    project?: string;
}
export interface DeleteResponse {
}
export interface DeployRequest {
    entrypoint?: string;
    envVars?: {
        [key: string]: string;
    };
    name?: string;
    project?: string;
    repo?: string;
    runtime?: string;
    subfolder?: string;
}
export interface DeployResponse {
}
export interface DescribeRequest {
    name?: string;
    project?: string;
}
export interface DescribeResponse {
    function?: Func;
    timeout?: string;
    updatedAt?: string;
}
export interface Func {
    entrypoint?: string;
    name?: string;
    project?: string;
    repo?: string;
    runtime?: string;
    status?: string;
    subfolder?: string;
}
export interface ListRequest {
    project?: string;
}
export interface ListResponse {
    functions?: Func[];
}
